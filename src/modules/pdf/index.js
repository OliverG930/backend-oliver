const multer = require('multer')
const express = require('express')
const router = express.Router()
const fs = require('fs')
const pdf = require('pdf-parse')
const OpenAI = require('openai') // Import OpenAI
const openai = new OpenAI({ apiKey: process.env.API_KEY }) // Initialize OpenAI
const responses = require('../../red/responses')

// Multer storage configuration
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, './src/public/uploads') // Destination folder
  },
  filename: function (req, file, cb) {
    cb(null, `${Date.now()}-${file.originalname}`) // Unique filename
  }
})

// Multer file filter for PDF files
const fileFilter = (req, file, cb) => {
  if (file.mimetype === 'application/pdf') {
    cb(null, true) // Accept PDF files
  } else {
    cb(new Error('Only PDF files are allowed'), false) // Reject other files
  }
}

const upload = multer({ storage, fileFilter })

// Function to summarize or trim the text
const summarizeText = (text, maxLength) => {
  // Split the text into sentences
  const sentences = text.split('. ').filter(Boolean)

  // Create a summary by taking the most significant sentences
  let summary = ''
  for (const sentence of sentences) {
    if ((summary + sentence).length > maxLength) break // Stop if we exceed the length
    summary += sentence + '. ' // Add the sentence to the summary
  }
  return summary.trim() // Return the trimmed summary
}

// Route to handle file upload, extract text, and generate exercises
router.post('/uploadp', upload.single('myFile'), async (req, res) => {
  console.log('Received request to upload and process PDF')

  if (!req.file) {
    return res.status(400).json({ error: 'No file uploaded or invalid file type' })
  }

  try {
    // Read and parse PDF content
    const dataBuffer = fs.readFileSync(req.file.path)
    const pdfData = await pdf(dataBuffer) // Extract text content
    let pdfText = pdfData.text

    // Summarize the extracted text to reduce the number of tokens
    const MAX_INPUT_LENGTH = 3000 // Adjust this value based on your needs
    pdfText = summarizeText(pdfText, MAX_INPUT_LENGTH)

    // Send summarized PDF text to OpenAI for exercise generation
    const completion = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        {
          role: 'user',
          content: `Here is the text: "${pdfText}". 
                    Use the text and, Generate 10 exercises on this text, 7
                    that are questions and 3 that are true/false. in English please.`
        }
      ],
      max_tokens: 500 // Limita los tokens de salida
    })

    // Parse the response from OpenAI
    const exercises = completion.choices[0].message.content.trim().split('\n').filter(e => e) // Separate lines for each exercise

    // Send the exercises generated by OpenAI back to the client

    responses.success(req, res, { message: completion.choices[0].message }, 200)
  } catch (err) {
    // Send error response if any part of the process fails
    res.status(500).json({ error: true, message: 'Error processing PDF file or generating exercises', details: err.message })
  }
})

router.post('/upload', async (req, res) => {
  console.log('Received request to upload and process PDF')

  if (!req.file) {
    return res.status(500).json({ error: 'No file uploaded or invalid file type' })
  }

  try {
    // Read and parse PDF content
    const dataBuffer = fs.readFileSync(req.file.path)
    const pdfData = await pdf(dataBuffer) // Extract text content
    let pdfText = pdfData.text

    // Summarize the extracted text to reduce the number of tokens
    const MAX_INPUT_LENGTH = 3000 // Adjust this value based on your needs
    pdfText = summarizeText(pdfText, MAX_INPUT_LENGTH)

    // Send summarized PDF text to OpenAI for exercise generation
    const completion = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        {
          role: 'user',
          content: `Here is the text: "${pdfText}". 
                    Use the text and, Generate 10 exercises on this text, 7
                    that are questions and 3 that are true/false. in English please.`
        }
      ],
      max_tokens: 500 // Limita los tokens de salida
    })

    // Parse the response from OpenAI
    const exercises = completion.choices[0].message.content.trim().split('\n').filter(e => e) // Separate lines for each exercise

    // Send the exercises generated by OpenAI back to the client

    responses.success(req, res, { message: completion.choices[0].message }, 200)
  } catch (e) {
    console.log(e.message)
  }
})

module.exports = router
// el oli specials ....
